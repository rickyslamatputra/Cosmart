// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ky\OneDrive\Desktop\Cosmart\internal\repository\repository.go

// Package mock is a generated GoMock package.
package mock

import (
	model "Cosmart/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPickupRepository is a mock of PickupRepository interface.
type MockPickupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPickupRepositoryMockRecorder
}

// MockPickupRepositoryMockRecorder is the mock recorder for MockPickupRepository.
type MockPickupRepositoryMockRecorder struct {
	mock *MockPickupRepository
}

// NewMockPickupRepository creates a new mock instance.
func NewMockPickupRepository(ctrl *gomock.Controller) *MockPickupRepository {
	mock := &MockPickupRepository{ctrl: ctrl}
	mock.recorder = &MockPickupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPickupRepository) EXPECT() *MockPickupRepositoryMockRecorder {
	return m.recorder
}

// GetAllSchedule mocks base method.
func (m *MockPickupRepository) GetAllSchedule() []model.PickupSchedule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSchedule")
	ret0, _ := ret[0].([]model.PickupSchedule)
	return ret0
}

// GetAllSchedule indicates an expected call of GetAllSchedule.
func (mr *MockPickupRepositoryMockRecorder) GetAllSchedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSchedule", reflect.TypeOf((*MockPickupRepository)(nil).GetAllSchedule))
}

// SaveSchedule mocks base method.
func (m *MockPickupRepository) SaveSchedule(schedule model.PickupSchedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSchedule", schedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSchedule indicates an expected call of SaveSchedule.
func (mr *MockPickupRepositoryMockRecorder) SaveSchedule(schedule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSchedule", reflect.TypeOf((*MockPickupRepository)(nil).SaveSchedule), schedule)
}

// MockBookRepository is a mock of BookRepository interface.
type MockBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepositoryMockRecorder
}

// MockBookRepositoryMockRecorder is the mock recorder for MockBookRepository.
type MockBookRepositoryMockRecorder struct {
	mock *MockBookRepository
}

// NewMockBookRepository creates a new mock instance.
func NewMockBookRepository(ctrl *gomock.Controller) *MockBookRepository {
	mock := &MockBookRepository{ctrl: ctrl}
	mock.recorder = &MockBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepository) EXPECT() *MockBookRepositoryMockRecorder {
	return m.recorder
}

// GetBooksBySubject mocks base method.
func (m *MockBookRepository) GetBooksBySubject(subject string) ([]model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksBySubject", subject)
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksBySubject indicates an expected call of GetBooksBySubject.
func (mr *MockBookRepositoryMockRecorder) GetBooksBySubject(subject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksBySubject", reflect.TypeOf((*MockBookRepository)(nil).GetBooksBySubject), subject)
}
