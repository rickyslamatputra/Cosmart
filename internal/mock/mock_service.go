// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ky\OneDrive\Desktop\Cosmart\internal\service\service.go

// Package mock is a generated GoMock package.
package mock

import (
	model "Cosmart/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPickupService is a mock of PickupService interface.
type MockPickupService struct {
	ctrl     *gomock.Controller
	recorder *MockPickupServiceMockRecorder
}

// MockPickupServiceMockRecorder is the mock recorder for MockPickupService.
type MockPickupServiceMockRecorder struct {
	mock *MockPickupService
}

// NewMockPickupService creates a new mock instance.
func NewMockPickupService(ctrl *gomock.Controller) *MockPickupService {
	mock := &MockPickupService{ctrl: ctrl}
	mock.recorder = &MockPickupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPickupService) EXPECT() *MockPickupServiceMockRecorder {
	return m.recorder
}

// GetAllSchedule mocks base method.
func (m *MockPickupService) GetAllSchedule() []model.PickupSchedule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSchedule")
	ret0, _ := ret[0].([]model.PickupSchedule)
	return ret0
}

// GetAllSchedule indicates an expected call of GetAllSchedule.
func (mr *MockPickupServiceMockRecorder) GetAllSchedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSchedule", reflect.TypeOf((*MockPickupService)(nil).GetAllSchedule))
}

// SaveSchedule mocks base method.
func (m *MockPickupService) SaveSchedule(schedule model.PickupSchedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSchedule", schedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSchedule indicates an expected call of SaveSchedule.
func (mr *MockPickupServiceMockRecorder) SaveSchedule(schedule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSchedule", reflect.TypeOf((*MockPickupService)(nil).SaveSchedule), schedule)
}

// MockBookService is a mock of BookService interface.
type MockBookService struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceMockRecorder
}

// MockBookServiceMockRecorder is the mock recorder for MockBookService.
type MockBookServiceMockRecorder struct {
	mock *MockBookService
}

// NewMockBookService creates a new mock instance.
func NewMockBookService(ctrl *gomock.Controller) *MockBookService {
	mock := &MockBookService{ctrl: ctrl}
	mock.recorder = &MockBookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookService) EXPECT() *MockBookServiceMockRecorder {
	return m.recorder
}

// GetBooks mocks base method.
func (m *MockBookService) GetBooks(subject string) ([]model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", subject)
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockBookServiceMockRecorder) GetBooks(subject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockBookService)(nil).GetBooks), subject)
}
